pbinom(5, 1000, .01)
pbinom(5, 2.5*4, .01)
pbinom(5, 1000*.01)
ppois(5, 1000*.01)
2
coinPlot(10)
coinPlot(10000)
qnorm(.95)
0
.6 + c(-1,1)*qnorm(.975)*sqrt(.6*.4/100)
0
binom.test(60,100)$conf.int
0
mywald(.2)
ACCompar(20)
0
lamb <- 5/94.32
0
lamb +c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
lamb +c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson.test(5,94.32)$conf
myplot(2)
0
myplot(20)
myplot(2)
myplot2(2)
0
qt(.975,2)
myplot2(20)
sleep
range(g1)
range(g2)
difference g2-g1
difference <- g2-g1
mean(difference)
s<- sd(difference)
mean(difference)
mn + c(-1,1)*qt(.975,9)*s/sqrt(10)
mn + c(-1,1)*qt(.975,9)*s/sqrt(10)
t.test(difference)$conf.int
0
sp <- 7*15.34^2 + 20*18.23^2
19
18
ns <- 18
ns <- 25
ns <- 27
sp/ns
sp <- sqrt(sp/ns)
0
132.86-127.44+c(-1,1)*qt(.975,ns)*sp*sqrt(1/8+1/21)
0
sp <- sqrt((9*var(g1)+9*var(g2))/18)
0
md + c(-1,1)*qt(.975,18)*sp*sqrt(1/5)
0
t.test(g2,g1,paired=FALSE,var.equal=TRUE)$conf
0
t.test(g2,g1,paired=TRUE)$conf
0
num <- (15.34^2/8 + 18.23^2/21)^2
0
den <- 15.34^4/8^2/7 + 18.23^4/21^2/20
0
mydf <- num/den
mydf <- num/den
132.86-127.44 +c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/8 + 18.23^2/21)
installed.packages('UsingR')
library(UsingR)
installed.packages('UsingR')
library('UsingR')
installed.packages('UsingR')
install.packages('UsingR')
?order
x <- rnorm(100)
y <- rnorm(100)
odr <- order(x)
odr[100]
rm(list = ls())
x <- c(0.18, -1.54, 0.42, 0.95)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(x~y)
plot(lm(x~y))
plot(lm(x~y))
lm(x~y -1)
lm(y ~ x -1)
data(mtcars)
?lm
names(mtcars)
lm(mpg ~ wt, data = mtcars)
library(ggplot2)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
me <- mean(x)
sd <- sqrt(var(x))
(x-me)/sd
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
w <- c(2, 1, 3, 1)
mean(q)
mean(w)
x <- c(0.18, -1.54, 0.42, 0.95)
mean(x)
y = 0
for(i in 1:4){ y = y + w[i](x[i] - 0.3)^2}
for(i in 1:4){
y = y + w[i](x[i] - 0.3)^2}
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
y <- 0
for(i in 1:4){ y = y + w[i](x[i] - 0.3)^2}
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
y <- 0
for(i in 1:4){ y = y + w[i]*(x[i] - 0.3)^2}
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
y <- 0
for(i in 1:4){ y = y + w[i]*(x[i] - 0.1471)^2}
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
y <- 0
for(i in 1:4){ y = y + w[i]*(x[i] - 1.077)^2}
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(y~x)
ft <- lm(y~x)
ft
summary(ft)
ft <- lm(mpg ~ wt, data = mtcars)
summary(ft)
ft <- lm(mpg ~ I(mean(wt)), data = mtcars)
ft <- lm(mpg ~ I(wt-mean(wt)), data = mtcars)
summary(ft)
summary(ft)$coefficients
t<- summary(ft)$coefficients
ft$df
t[2,1] - qt(0.975, df = ft$df)*t[2,2]
head(mtcars)
predict(ft, newdata =  3.0, interval = "prediction")
new <- data.frame(wt = 3.0)
predict(ft, newdata =  new, interval = "prediction")
?predict
ft <- lm(mpg ~ wt, data = mtcars)
predict(ft, newdata =  new, interval = "prediction")
ft <- lm(mpg ~ I(wt/2), data = mtcars)
summary(ft)$coefficients
t <- summary(ft)$coefficients
t[2,1] - qt(0.975, df = ft$df)*t[2,2]
ft <- lm(mpg ~ wt, data = mtcars)
summary(ft)
ft <- lm(mpg ~ wt, data = mtcars)
t <- summary(ft)$coefficients
t[2,1] - qt(0.975, df = ft$df)*t[2,2]
ft <- lm(mpg ~ I(wt-mean(wt)), data = mtcars)
t <- summary(ft)$coefficients
t
t[1,1] - qt(0.975, df = ft$df)*t[1,2]
ft <- lm(mpg ~ wt, data = mtcars)
ft <- lm(mpg ~ wt-1, data = mtcars)
summary(ft)
ft <- lm(mpg ~ wt, data = mtcars)
summary(ft)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
install.packages('rCharts')
library(rCharts)
require('rCharts')
require(rCharts)
install.packages('rCharts')
data("mtcars")
rm(list = ls())
data("mtcars")
names(mtcars)
mtcars$cyl
class(mtcars$cyl)
factor(mtcars$cyl)
mtcars$cyl <- factor(mtcars$cyl)
class(mtcars$cyl)
fit <- lm(mpg~ cyl+wt, data = mtcars)
fit
fit <- lm(mpg~ cyl, data = mtcars)
fit
fit <- lm(mpg~ cyl*wt, data = mtcars)
fit
summary(fit)
fit <- lm(mpg~ cyl+wt+cyl*wt, data = mtcars)
summary(fit)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
f <- lm(y~x)
hatvalues(f)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
f <- lm(y~x)
dfbetas(f)
fit <- lm(mpg~ cyl+wt, data = mtcars)
summary(fit)
fit <- lm(mpg~ cyl+wt+wt*cyl, data = mtcars)
summary(fit)
mtcars$wt
rm(list = ls())
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages(AppliedPredictiveModeling)
install.packages('AppliedPredictiveModeling')
install.packages('caret')
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
rm(list = ls())
data(AlzheimerDisease)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
rm(list = ls())
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
rm(list = ls())
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
names(training)
hist(Superplasticizer, data = training)
hist(training$Superplasticizer)
hist(log(training$Superplasticizer+1))
hist(training$Superplasticizer)
hist(log(training$Superplasticizer+1))
summary(training$Superplasticizer)
hist(log(training$Superplasticizer+1))
a <- training$Superplasticizer+1
hist(log(a))
hist(log10(a))
hist(log(a))
rm(list = ls())
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
grep('IL', names(training))
i <- grep('IL', names(training))
names(training[,i])
i <- grep(' IL', names(training))
names(training[,i])
i <- grep('IL_', names(training))
names(training[,i])
i <- grep('^IL_', names(training))
names(training[,i])
preProcess(training[,i], method = 'pca', thresh = 0.9)
rm(list = ls())
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
i <- grep('^IL_', names(training))
names(training[,i])
grep('diag', training)
grep('diag', names(training))
t <- training[,c(1,i)]
names(t)
fit <- train(t, diagnosis~. ,method = 'glm')
fit <- train(diagnosis~. ,data = t ,method = 'glm')
install.packages('e1071')
fit <- train(diagnosis~. ,data = t ,method = 'glm')
summary(fit)
fit
prepro <- preProcess(t[,-1], method = 'pca')
trainpc <- predict(prepro, t[,-1])
fit2 <- train(diagnosis~.,method = 'glm', data = trainpc)
fit2 <- train(training$diagnosis~.,method = 'glm', data = trainpc)
fit2
rm(list = ls())
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
rm(list = ls())
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
rm(list = ls())
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
rm(list = ls())
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
train = createDataPartition(diagnosis, p = 0.50,list=FALSE)
test = createDataPartition(diagnosis, p = 0.50,list=FALSE)
rm(list = ls())
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
rm(list = ls())
setwd('b:\r working directory')
setwd('b:/r working directory')
dir.create('regres')
setwd('b:/r working directory/regres')
data("mtcars")
names(mtcars)
library(ggplot2)
plotmatrix(mtcars)
ggpairs(mtcars)
pairs(mtcars)
?mtcars
plot(mpg~am, data = mtcars)
g <- ggplot(data = mtcars, aes(am,mpg))
g+geom_point()
g+geom_point()+geom_point(aes(am, mean(mpg)))
g+geom_point()+geom_point(aes(am, mean(mpg)), color = 'red')
g+geom_point()+geom_point(aes(am, mean) color = 'red')
g+geom_boxplot()
g+geom_point()+geom_point(aes(mean(mpg)), color = 'red')
g+geom_point()
class(mtcars$am)
mtcars$am <- factor(mtcars$am)
class(mtcars$am)
g <- ggplot(data = mtcars, aes(am,mpg))
g+geom_point()
g+geom_point()+geom_point(aes(mean(mpg)), color = 'red')
g+geom_point()+geom_point(y = aes(mean(mpg)), color = 'red')
g+geom_point()+geom_point(aes(y = mean(mpg)), color = 'red')
g+geom_point()+geom_point(aes(am, mean(mpg)), color = 'red')
g+geom_point()+geom_point(aes(am, mean(mpg)), color = 'am')
g+geom_point()+geom_point(aes(am, mean(mpg)), color = am)
g+geom_point()+geom_point(aes(am, mean(mpg)), color = 'red')
g+geom_boxplot()
g+geom_point(facet(disp))
g+geom_point()+ facet_grid(.~cyl)
g+geom_boxplot()+ facet_grid(.~cyl)
g+geom_boxplot()+ facet_grid(.~disp)
g+geom_boxplot()+ facet_grid(.~gear)
g+geom_boxplot(aes(color = disp))
g+geom_point(aes(color = disp))
g+geom_point(aes(color = disp), size = 3)
g+geom_point(aes(color = disp), size = 5)
model1 <- lm(mpg~am, data = mtcars)
model1$coefficients
plot(model1)
model2 <- lm(mpg~am+cyl+gear+disp)
model2 <- lm(mpg~am+cyl+gear+disp, data = mtcars)
model2$coefficients
plot(model2)
model2
summary(model2)
t.test(mtcars$mpg~mtcars$am,conf.level=0.95, var.equal = FALSE)
var(mtcars$mpg)
var(mtcars$mpg[am == 0])
var(mtcars$mpg[mtcars$am == 0])
var(mtcars$mpg[mtcars$am == 1])
View(mtcars)
names(mtcars)
type(mtcars)
classtype(mtcars)
class(mtcars)
class(names(mtcars))
class(mtcars[1:])
class(mtcars[1:11])
class(mtcars[,1:11])
class(mtcars[1:11,])
class(mtcars[1])
class(mtcars[1,])
class(mtcars[,1])
for i in 1:len(mtcars){cls <- class(mtcars[,i])}
for (i in 1:len(mtcars)){cls <- class(mtcars[,i])}
for (i in 1:length(mtcars)){cls <- class(mtcars[,i])}
cls
length(mtcars)
1:11
for (i in 1:length(mtcars)){cls[i] <- class(mtcars[,i])}
cls
var_names <- names(mtcars)
cbind(var_names, cls)
View(mtcars)
for (i in 1:length(mtcars)){cls[i] <- class(mtcars[,i])}
cbind(var_names, cls)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs, labels = c('V-Engine', 'Straight Engine'))
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
mtcars$am <- factor(mtcars$am,labels=c('Automatic','Manual'))
var(mtcars$mpg[mtcars$am == 1])
var(mtcars$mpg[mtcars$am == 'Automatic'])
var(mtcars$mpg[mtcars$am == 'Manual'])
mtcars$am
a <- mtcars$am
data(mtcars)
mtcars$am
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs, labels = c('V-Engine', 'Straight Engine'))
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
mtcars$am <- factor(mtcars$am,labels=c('Automatic','Manual'))
t.test(mtcars$mpg~mtcars$am,conf.level=0.95)
model1 <- lm(mpg~am, data = mtcars)
summary(model1)
model1$coefficients
model1$residuals
model1$rank
model1$terms
summary(model1)
lm(formula = mpg ~ am + wt + hp + cyl, data = mtcars)
data(mtcars)
lm(formula = mpg ~ am + wt + hp + cyl, data = mtcars)
boxplot(mpg ~ am, data = mtcars, xlab = "Transmission", ylab = "Miles per gallon", main="Miles per gallon by Transmission Type")
model2 <- lm(mpg~., data = mtcars)
best_model <- step(model2, direction = "backward")
summary(best_model)
lm(formula = mpg ~ wt + qsec + am, data = mtcars)
summary(lm(formula = mpg ~ wt + qsec + am, data = mtcars))
model2 <- lm(mpg~., data = mtcars)
best_model <- step(model2, direction = "backward")
best_model
summary(best_model)
rm(list = ls())
data("mtcars")
model2 <- lm(mpg~., data = mtcars)
best_model <- step(model2, direction = "backward")
summary(best_model)
mtcars2 <- mtcars
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
mtcars$am <- factor(mtcars$am)
model2 <- lm(mpg~., data = mtcars)
best_model <- step(model2, direction = "backward")
summary(best_model)
lm(formula = mpg ~ cyl + hp + wt + am, data = mtcars)
summary(best_model)
plotmatrix(mtcars)
ggpairs(mtcars)
install.packages('GGally')
library(GGally)
ggpairs(mtcars)
g <- ggplot(data = mtcars, aes(am,mpg))
g+geom_boxplot()
g+geom_boxplot()+labs(x = 'Transmission', y = 'Miles per Gallon')
cbind(mtcars$am, mtcars2$am)
cbind(factor(mtcars$am), mtcars2$am)
mtcars$am
mtcars2$am
mtcars$am <- factor(mtcars$am,labels=c('Automatic','Manual'))
mtcars$am
